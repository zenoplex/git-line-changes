name: Release

on:
  push:
    # Match semantic versioning tags.
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
  # Allow manually trigger.
  workflow_dispatch:
    inputs:
      version:
        description: The version for manual release.
        required: true
        default: ""

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TARGETS: x86_64-unknown-linux-musl x86_64-pc-windows-gnu x86_64-apple-darwin aarch64-apple-darwin
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract package name
        shell: bash
        run: |
          echo "PACKAGE_NAME=$(sed -n 's/^name = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV

      - name: Get the release version from the tag, or use the input version
        run: |
          if [ -z "${{ github.event.inputs.version }}" ]; then
            VERSION=${{ github.ref_name }}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Show the version
        run: echo ${{ env.VERSION }}

      # - Could use: dtolnay/rust-toolchain@stable
      - name: Install Linux and Windows Cross Compilers
        run: sudo apt-get install --yes --no-install-recommends musl-tools gcc-mingw-w64-x86-64-win32

      - name: Set up MacOS Cross Compiler
        uses: Timmmm/setup-osxcross@v2
        with:
          osx-version: "12.3"

      - name: Install Rust target
        run: rustup target add x86_64-unknown-linux-musl x86_64-pc-windows-gnu x86_64-apple-darwin aarch64-apple-darwin

      - name: Build
        run: cargo build --release $(echo ${{ env.TARGETS }} | xargs -n 1 echo --target)

      - name: Compress binaries
        run: |
          mkdir -p binaries
          for target in $(echo ${{ env.TARGETS }}); do
            ext=""
            if [[ "$target" == *"windows"* ]]; then
              ext=".exe"
            fi
            file_name="${{ env.PACKAGE_NAME }}-${{ env.VERSION }}-${target}${ext}"
            file_path="target/${target}/release/${{ env.PACKAGE_NAME }}${ext}"

            echo $file_name
            echo $file_path

            if [[ "$target" == *"windows"* ]]; then
              zip -j "binaries/${file_name}.zip" "$file_path"
            else
              tar -czf "binaries/${file_name}.tar.gz" -C "target/${target}/release" "${{ env.PACKAGE_NAME }}"
            fi
          done

      - name: Upload to release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ env.VERSION }}
          files: |
            binaries/*

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        if: github.event_name == 'workflow_dispatch'
        with:
          path: binaries/*
